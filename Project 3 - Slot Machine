# Project 3: Slot Mechine
# Programs..................................
# In this chapter, i will build a real, working slot mechine that i can play
# by running an R function. The name of function will be "play" function.
# The "play" function will need to do two things. First, it will need to
# randomly generate three symbols; and second it will need to calculate a prize
# based on those symbols.

# I an randomly generate three symbols with the "sample" function. The following
# function generates three symbols from a group of common slot mechine symbols:
# diamonds (DD), sevens (7), triple bars (BBB), double bars (BB), single bars (B),
# cherries (C), and zeroes (0). The symbols are selected randomly, and each symbol
# appears with a different probability:

get_symbols <- function(){
  wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
  sample(wheel, size = 3, replace = TRUE, prob = c(0.03, 0.03, 0.06, 0.1,
                                                   0.25, 0.01, 0.52))
}
get_symbols()

# Strategy..................................
# Storing slot mechine results is a complex task that will require a complex
# algorithm. I can make this, and other coding tasks, easier by using a simple
# strategy. I can make coding easier by indentifing the individual steps or
# subtask within my program. R programs contain two types of subtasks:
# sequential steps and parallel cases.

# Sequential steps............................
# I can make my solt mechine program by three different sepuential steps.
# First step - Generate symbols. Second step - Display the symbols.
# Third step - Score the symbols. To have R execute these steps in sequence,
# Place the steps one after another in an R script or function body.

play <- function(){
  
  # step 1: generate symbols
  symbols <- get_symbols()
  
  # step 2: display the symbols
  print(symbols)  # The "print" command prints its output to the console window
  
  # step 3: score the symbols
  score(symbols)
}

# Parallel Cases..................................
# I have already solved the first few steps in this strategy. My program can
# get three slot mechine symbols with the "get_symbols" function. Then it can
# display the symbols with the print function. Now let's examine how the program
# can handle the parallel score cases. The complete slot mechine simulation
# will involve subtasks that are arranged both in series and in parallel.

# if statements..................................
# An if statement tells R to do a certain task for a certain case. In English
# i would say something like, "if this is true, do that".
# I can write an if statement that ensures some object, num, is positive.
# If num < 0 is TRUE, R will multiple num by negative one, which will make num
# positive:

num <- -4
if(num < 0){
  num <- num * -1
}
num

# If num < 0 is FALSE, R will do nothing and num will remain as it is:

num <- 2
if(num < 0){
  num <- num * -1
}
num

# The condition of an "if" statement must evaluate to a single TRUE or FALSE.
# If the condition creates a vector of TRUES and FALSES, my "if" statement will
# print a warning message and use only the first of the vector.

condition <- c(TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE,)
if(condition){
  print("I have taken TRUE, beacuse TRUE is the first element of condition")
}

# Remember that i can condense vectors of logical values to a single TRUE or
# FALSE with the function "any" and "all"

condition2 <- c(FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE)
# Given a set a logical vector, is at least one of the values true?
any(condition2)
all(condition2) # Are all of the values true?

# I don't have to limit my "if" statements to a single line of code. I can
# include as many lines as i like between the braces. The following code uses
# many lines to ensure that num is positive.

num <- -1
if(num < 0){
  print("num is negative.")
  print("Don't worry, I'll fix it.")
  num <- num * -1
  print("Now num is positive.")
}
num

# The code will return the number 2. x begins as 300, and then R encounters the
# "if" statement. Since the condition evaluates to TRUE, R will run x <- 2,
# changing the value of x

x <- 300
if(3==3){
  x <- 2
}
x

# This code also return the number 2. The condition in this statement is already
# TRUE. R doesn't need to evaluate it. As a result, the code inside the "if"
# statement will be run, and x will be set to 2.

x <- 100
if(TRUE){
  x <- 2
}
x

# Once again, the code will return the number 2. x starts out as 1, and the
# first condition of the first "if" statement will evaluate to TRUE. First, R
# sets x equal to 2, then R evaluates the second "if" statement, this time
# x == 1 will evaluate to FALSE because x now equals to 2. As a result, R
# ignores x <- 3 and exits both "if" statements.

x <- 1
if(x == 1){
  x <- 2
  if(x == 1){
    x <- 3
  }
}
x

# "else" statement....................................
# I can also tell R what to do when the condition is FALSE. In english I would
# say, "If this is true, do plan A; else do plan B.

# I could write some code that rounds a decimal to the nearest integer.
# "trunc" takes a number and returns only the portion of the number that appears
# to the left of the decimal place.

a <- 5.75
dec <- a - trunc(a)     # isolate the decimal component

if (dec >= 0.5) {
  a <- trunc(a) + 1
} else {
  a <- trunc(a)
}
a

# If my situation has more than two mutually exclusive cases, i can string
# multiple "if" and "else" together by adding a new "if" statement immediately
# after "else".

a <- 1
b <- 1

if (a > b) {
  print("A Wins!")
} else if (a < b) {
  print("B Wins!")
} else {
  print("Tie")
}

# Test -1 for slot mchine program............................
# Test wheaher the symbols are three of a kind. Here are a couple of ways to
# test that symbols contains three of the same symbol

symbols <- c("7", "7", "7")
symbols[1] == symbols[2] & symbols[2] == symbols[3]
symbols[1] == symbols[2] & symbols[1] == symbols[3]
all(symbols == symbols[1])
length(unique(symbols)) == 1

# && and || behave like & and | but can sometimes be more efficient. The double
# operators will not evaluate the second test in a pair of tests if first test
# makes the result clear. If left side of the double operator is FALSE, the
# double operator will not evaluate the right side of double operator. It can
# immediately return a FALSE for the whole expression. This efficiency can
# speed up my program. The doble operator can only handle a single logical
# test on each side of the oprator.

same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]

# Test- 2: for slot mechine program..............................
# Are all the symbols a type of bar? There are multiple ways to test whether
# symbols contains all bars. 

symbols <- c("B", "BBB", "BB")
(symbols[1] == "B" | symbols[1] == "BB" | symbols[1] == "BBB") &
  (symbols[2] == "B" | symbols[2] == "BB" | symbols[2] == "BBB") &
  (symbols[3] == "B" | symbols[3] == "BB" | symbols[3] == "BBB")

all(symbols %in% c("B", "BB", "BBB"))
bars <- symbols %in% c("B", "BB", "BBB")

# My next subtask is to assign a prize for symbols. when the "symbols" vector
# contains three of the same symbol, the prize will depend on which symbol
# there are three of. I could assign a prize with some code like this:

if (same) {
  symbol <- symbols[1]
  if (symbol == "DD") {
    prize <- 800
  } else if (symbol <- "7") {
    prize <- 80
  } else if (symbol <- "BBB") {
    prize <- 40
  } else if (symbol <- "BB") {
    prize <- 25
  } else if (symbol <- "B") {
    prize <- 10
  } else if (symbol <- "C") {
    prize <- 10
  } else if (symbol <- "0") {
    prize <- 0
  }
} 

# I can do better with a different method.
# Look up tables.....................................
# I can create a vector that captures this information. This vector can store
# symbols as names and prize values as elements:

payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
             "B" = 10, "C" = 10, "0" = 0)
payouts

# Now i can extract the correct prize for any symbol by subsetting the vector
# with the symbol's name:

payouts["DD"]
payouts["BB"]

# I can leave behind the symbol's name when subsetting with the "unname" function.

unname(payouts["DD"])

# I now have a simple automated way to calculate the prize when "symbols"
# contains three of a kind.

symbols <- c("7", "7", "7")
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")

if (same) {
  payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
               "B" = 10, "C" = 10, "0" = 0)
  prize <-unname(payouts[symbols[1]])
  prize
} else if (all(bars)) {
  prize <- 5
  prize
}

# Now i can work on the last test. Here, I will need to know how mamny cherries
# are in "symbols" before i can calculate a prize. How can i tell which
# elements of a vector named "symbols" are a "C"? How might i count the number
# of Cs in a vector named "symbols"?

symbols <- c("C", "DD", "C")
symbols == "C"

# How many of the symbols are cherries?

sum(symbols == "C")

# I can use the same method to count the number of diamonds in symbols.

sum(symbols == "DD")

# My prize should be $0 if i have no cherries, $2 if i have one cherry, and
# $5 if i have 2 cherries. i can create a vector that contains this information

symbols <- c("C", "DD", "C")
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
cherries <- sum(symbols == "C")

if (same) {
  payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
               "B" = 10, "C" = 10, "0" = 0)
  prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
  prize <- 5
} else {
  cherries <- sum(symbols == "C")
  prize <- c(0, 2, 5)[cherries +1]
}
diamonds <- sum(symbols == "DD")

# The final subtask is to double prize once for every diamond present.
prize * 2 ^ diamonds

# Slot mechine program turn into a function
# A player will win a prize if he gets:..................................
# Three of the same type of symbol (except for three zeroes)
# Three bars (of mixed variety)
# One or more cherries
# Get symbols

get_symbols <- function(){
  wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
  sample(wheel, size = 3, replace = TRUE, prob = c(0.03, 0.03, 0.06, 0.1,
                                                   0.25, 0.01, 0.52))
}

score <- function (symbols) {
  # Identify case
  same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
  bars <- symbols %in% c("B", "BB", "BBB")
  
  # Get prize
  if (same) {
    payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
                 "B" = 10, "C" = 10, "0" = 0)
    prize <- unname(payouts[symbols[1]])
  } else if (all(bars)) {
    prize <- 5
  } else {
    cherries <- sum(symbols == "C")
    prize <- c(0, 2, 5)[cherries + 1]
  }
  
  # adjust for diamonds
diamonds <- sum(symbols == "DD")
prize * 2 ^ diamonds

}

# Final function for slot mechine

play <- function() {
  symbols <- get_symbols()
  print(symbols)
  score(symbols)
}

# Now it is easy to play the slot mechine

play()

# The S3 system.........................................
# S3 refers to a class system built into R. The system governs how R handles
# objects of different classes. Certain R functions will lookup an onject's
# S3 class, and then behave differently in response. R's S3 system is built
# arround three components: attributes (especially the "class" attribute),
# generic function, and methods.

# The "print" fuynction is like this. When i print a numeric vector,
# print will display a number.

number <- 1000000000
print(number)

# But if i give that number the S3 class POSIXct followed POSIXt, print will
# display a time.

class(number) <- c("POSIXct", "POSIXt")
print(number)

# My current mechine displays its results in a less preety format. Moreover,
# The slot mechine uses a hack to display symbols (I call "print" from
# within "play"). As a result, the symbols do not follow my prize output
# if i save it.

one_play <- play()
one_play

# I can fix both of these problems with R's S3 symtem. I can add any general
# attribute to an object with "attr". I can also use "attr" to loook up the
# value of any atribute of an object. Let's see how this works with "one_play"

attributes(one_play)

# "attr" takes two argument: an R object and the name of an attribute (as a
# string). To give the R object an attribute of the specified name, save a vlaue
# to the output of "attr". Let's give "one_paly" an attribute named "symbols"
# that contains a vector of character strings:

attr(one_play, "symbols") <- c("B", "0", "B")
attributes(one_play)

# To look up the value of any attribute, give "attr" an R object and the name
# of the attribute i would like to look up:

attr(one_play, "symbols")
one_play

# Modify "play" function to return a prize that contains the symbols associated
# with iot as an attribute named "symbols". Remove the redundant call to
# print(symbols):

play <- function(){
  symbols <- get_symbols()
  prize <- score(symbols)
  attr(prize, "symbols") <- symbols
  prize
}

play()
two_play <- play()
two_play

# I can also generate a prize and set its attributes in one step with the
# "structure" function. "structure" creates an object with a set of attributes
# The first argument of "structure" should be an R object or set of values, and
# the remaining arguments should be named attributes for structure to add the
# object.

play <- function() {
  symbols <- get_symbols()
  structure(score(symbols), symbols = symbols)
}

play()

three_play <- play
three_play()

# I can write my own functions that lookup and use the attribute. This following
# function will lookup one_play's "symbols" atttribute and use it to display
# "one_play" in a pretty manner. I will use this function to display my
# slot results:

slot_display <- function(prize){
  
  # Extract symbols
  symbols <- attr(prize, "symbols")
  
  # collapse symbol into singe string
  symbols <- paste(symbols, collapse = "")
  
  # combine symbol with prize as a character string
  # \n is special escape sequense for a new line
  string <- paste(symbols, prize, sep = "\n$")
  
  # display character string in console without quotes
  cat(string)
}

slot_display(one_play)
one_play

# The first line of function will lookup the value of the "symbols" attribute
# and save it as an object named "symbols"

symbols <- attr(one_play, "symbols")
symbols

# "Paste" collapse a vector of character strings into a single string when i
# give it the "collapse" argument. "paste" will use the value of "collapse"
# to seperate the formerly distinct strings.

symbols <- paste(symbols, collapse = " ")
symbols

# "paste" combines seperate objects into a character string when i give it a
# "sep" argument. "paste" will combine the string in "symbols" with the number
# in "prize". "paste" will use the value of "sep" to seperate the inputs in
# the new string. 

prize <- one_play
string <- paste(symbols, prize, sep = "\n$")
string

# "cat" is like "print". It displays its input at the command line. "cat" does
# not surround its output with quotation marks. "cat" also replaces every '\n'
# with a new line or line break.

cat(string)

slot_display(play())

# Full code.......................................

get_symbols <- function(){
  wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
  sample(wheel, size = 3, replace = TRUE, prob = c(0.03, 0.03, 0.06, 0.1,
                                                   0.25, 0.01, 0.52))
}

score <- function (symbols) {
  same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
  bars <- symbols %in% c("B", "BB", "BBB")
  
  if (same) {
    payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
                 "B" = 10, "C" = 10, "0" = 0)
    prize <- unname(payouts[symbols[1]])
    
  } else if (all(bars)) {
    prize <- 5
    
  } else {
    cherries <- sum(symbols == "C")
    prize <- c(0, 2, 5)[cherries + 1]
    
  }
  diamonds <- sum(symbols == "DD")
  prize * 2 ^ diamonds
}

# I can use S3 to format my slot output. First, give my output its own class.
# Then write a print method for that class.

play <- function() {
  symbols <- get_symbols()
  structure(score(symbols), symbols = symbols, class = "slots")
}

slot_display <- function(prize){
  symbols <- attr(prize, "symbols")
  symbols <- paste(symbols, collapse = " ")
  string <- paste(symbols, prize, sep = "\n$")
  cat(string)
}

# Write a new print method fro the slots class. The method should call "slot_display"
# to return well formatted slot-mechine output. 

print.slots <- function(x, ...){
  slot_display(x)
}

play()
class(play())

# If i wrote the "slot_display" code inside the "print.slots", they would look
# like this:

print.slots <- function(x, ....) {
  x <- play()
  symbols <- attr(x, "symbols")
  symbols <- paste(symbols, collapse = " ")
  string <- paste(symbols, x, sep = "\n$")
  cat(string)
}

# Classes............................................
# I can use the S3 system to make a robust new class of objects in R. Then R will
# treat objects of my class in a consistent, sensible manner. To make a class:
# Choose a name for my class. Assign each instance of my class attribute. Write a
# class methods for any generic function likely to use objects of my class

# Consider how many methods exist for predefined classes. I can call "methods" on a
# class with the "class" argument, which takes a character string.
methods(class = "factor")

# Consider two challenges that i will face right away. First, R drops attributes
# (like class) when it combines objects into a vector.

play1 <- play()
play1
attributes(play1)

play2 <- play()
play2
attributes(play2)

c(play1, play2)
attributes(c(play1, play2))

# Here, R stops using "print.slots" to display the vector because the vector
# c(play1, play2) no longer has a "slots" +class+ attribute. Next, R will drop the
# attributes of an object (like class) when i subset the object:

play1[1]
attributes(play1[1])

# I can aviod this behaviour by writting a "c.slots" method and "[.slots" method,
# but then difficulties will quickly accrue. How would i combine the "symbols"
# attribute of multiple plays into a vector of symbols attributes? How would i change
# "print.slots" to handle vector of outputs?

# Expected Value............................................
# I could calculate the expected value of rolling a pair of weighted dice.
# expand.grid ..............................................
# The "expand.grid" function in R provides a quick way to write out every
# combination of the elements in n vector. I can list every combination of the
# elements of two dice.

# List out all of the possible outcomes between two vector.
die <- c(1,2,3,4,5,6)
rolls <- expand.grid(die, die)
rolls

# "expand.grid" will return a data frame that contains every way to pair an element
# from the first "die" vector with an element from the second "die" vector. I can
# use "expand.grid" with more than two vectors if i like.

# I can determine the value of each roll once i have made my list of outcomes.
# This will be the sum of two dice, which i can calculate using R's element-wise
# execution.

# Determine the value of each outcome.
rolls$Value <- rolls$Var1 + rolls$Var2
head(rolls, 5)

# Set Probability
prob = c("1" = 1/8, "2" = 1/8, "3" = 1/8, "4" = 1/8, "5" = 1/8, "6" = 3/8)
prob

# Set probability for Var1
rolls$Prob1 <- prob[rolls$Var1]
head(rolls)

# Set probability for Var2
rolls$Prob2 <- prob[rolls$Var2]
head(rolls)
rolls

# I can calculate the probability of rolling each combination by multiplying prob1
# by prob2
rolls$prob <- rolls$Prob1 * rolls$Prob2
head(rolls)

# It is easy to calculate the expected value now that we have each outcome, the
# value of each outcome, and the probability of each outcome. The expected value
# will be the summation of the dice values multiplied by the dice probabilities.
sum(rolls$Value * rolls$prob)

# Let's calculate the expected value of the slot slot mechine prize.

# We will list out every possible outcome of playing the mechine. This will be a
# list of every possible combination of three slot symbols.
# We will calculate the probability of getting each combination when i play the
# slot mechine.
# We will determine the prize that we would win for each combination.

# Use "expand.grid" to make a data frame that contains every possible combination
# of three symbols from the "wheel" vector.
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")

# Be sure to add the argument "stringsAsFactors = FALSE" to my "expand.grid" call;
# otherwise, "expand.grid" will save the combinations as factors.
# To create a data frame of each combinatino of three symbols, i need to run to 
# give three copies of "wheel" in the "expand.grid" function.

combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)

# Now, let's calculate the probability of getting each combination.

prob = c("DD" = 0.03, "7" = 0.03, "BBB" = 0.06,
         "BB" = 0.1, "B" = 0.25, "C" = 0.01, "0" = 0.52)

combos$prob1 <- prob[combos$Var1]
combos$prob2 <- prob[combos$Var2]
combos$prob3 <- prob[combos$Var3]

head(combos, 3)

# Calculate the overall probabilities for each combination. Save them as a column
# named "prob" in combos.

combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
head(combos, 3)

# The sum of probabilities is one, which suggests that my math is correct

sum(combos$prob)

# I only need to do one more thing before i can calculate the expected value. I
# must dermine the prize for each combination in combos. I can calculate the prize
# with "score" function. I can calculate the prize for the first row of "combos"
# like this:

symbols <- c(combos[1,1], combos[1,2], combos[1,3])
score(symbols)

# However there are 343 rows, which makes for tedious work if i plan to calculate
# the scores manually. It will be quicker to automate this task and have R do it
# for me, which i can do with a "for" loop.

# "for" Loops..................................................
# A "for" loop repeats a chunk of code many times, once for each element in a set
# of input. For example, the "for" loop below runs print("One run") once for each
# element in a vector of character strings:

for (value in c("My", "first", "for", "loop")) {
  print("One run")
}

# The "for" loop will create an object named "value" and assign it a new value on
# each run of the loop. The code in my loop can access this value by calling the
# "value" object.
# The "for" loop below will run print(value) four times and will print out one
# element of c("My", "first", "for", "loop") each time:

for (value in c("My", "second", "for", "loop")) {
  print(value)
}

# If i look at "value" after the loop runs, i will see that it still contains the
# value of the last element in the set:
value

# "for" loop won't return anything if i remove the "print" call:
for (value in c("My", "third", "for", "loop")) {
  value
}

# To save output from a "for" loop, i must write the loop so that it saves its own
# output as it runs. I can do this by creating an empty vector or list before i run
# the "for" loop. Then use the "for" loop to fill up the vector or list. When the
# "for" loop is finished, i will be able to access the vector or list.

chars <- vector(length = 4)
words <- c("My", "fourth", "for", "loop")
for (i in 1:4) {
  chars[i] <- words[i]
}
chars

# Let's use a "for" loop to calculate the prize for each row in "combos". To begin,
# create a new column in "combos" to store the results of the "for" loop:

combos$prize <- NA

for (i in 1:343) {
  symbol <- c(combos[i, 1], combos[i, 2], combos[i, 3])
  combos$prize[i] <- score(symbol)
}

head(combos,10)

# I am now ready to calculate the expected value of the prize. This is also the
# payout rate of the slot mechine

sum(combos$prize * combos$prob)

 Here is a version of "score" that handles wild diamonds:

score <- function (symbols) {
  
  diamonds <- sum(symbols == "DD")
  cherries <- sum(symbols == "C")
  
  # identify case
  # since diamonds are wild, only nondiamonds
  # matter for three of a kind and all bars
  slots <- symbols[symbols != "DD"]
  same <- length(unique(slots)) == 1
  bars <- slots %in% c("B", "BB", "BBB")
  
  # assign prize
  if (diamonds == 3) {
     prize <- 100
     
  } else if (same) {
    payouts <- c("7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, 
                 "C" = 10, "0" = 0)
    prize <- unname(payouts[slots[1]])
    
  } else if (all(bars)) {
    prize <- 5
    
  } else if (cherries > 0) {
    # diamonds count as cherries
    # so long as there is one real cherry
    prize <- c(0, 2, 5)[cherries + diamonds + 1]
    
  } else {
    prize <- 0
  }
  
  # double for each diamond
  prize * 2^diamonds
}

# calculate the expected value of the slot mechine when it uses the new "score"
# function. I will need to build a "for" loop to recalculate combos$prize.

for (i in 1:nrow(combos)) {
  symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
  combos$prize[i] <- score(symbols)
}

sum(combos$prize2 * combos$prob)

# while loop...................................................
# R has two companions to the "for" loop: the "while" loop and the "repeat" loop.
# A "while" loop reruns a chunk while a certain condition remains TRUE. To create
# a "while" loop, follow "while" by a condition and a chunk of code.

while (condition) {
  code
}

# "while" will rerun condition, which should be a logical test, at the start of
# each loop. I condition evaluates TRUE, "while" will run the code between its
# braces. If condition evaluates FALSE, "while" will finish the loop.

i <- 10
while (i > 0) {
  print("I am while loop")
  i = i - 1
}

# I can use while loop to do things that take a varying number of iterations, like
# calculating how long it takes to go broke playing slots.

play_till_broke <- function (start_with) {
  cash <- start_with
  n <- 0
  while (cash > 0) {
    cash <- cash - 1 + play()
    n <- n + 1
  }
  n
}

play_till_broke(100)

# repeat Loops.......................................
# "repeat" loop will repeat a chunk of code untill i tell them to stop. I can use
# a "repeat" loop to recreate plays_till_broke, my function that simulates how
# long it takes to lose money while playing slots:

plays_till_broke <- function (start_with) {
  cash <- start_with
  n <- 0
  repeat {
    cash <- cash - 1 + play()
    n <- n + 1
    if (cash <= 0) {
      break
    }
  }
  n
}

plays_till_broke(100)

# Speed...................................
# Vectorized Code.................................
# I can write a peice of code in many different ways, but the fastest R code will
# usually take advantage of three things: logical tests, subsetting, and element-
# wise execution. Code that uses these things usually has a certain quality: it is
# vectorized.
# To see what vectorized code looks like, compare these two examples of an
# absoulate value function. Each takes a vector of numbers and transforms it into a
# vector of absoulate values. The first example is not vectorized.

# "abs_loop" uses a "for" loop to manipulate each element of the vector one at a time:

abs_loop <- function (vec) {
  for (i in 1:length(vec)) {
    if (vec[i] < 0) {
      vec[i] <- vec[i]
    }
  }
  vec
}
abs_loop(c(-1,-2,-3,-4,-5,-6))

# "abs_set" is a vectorized version of "abs_loop". It uses logical subsetting to
# manipulate every negative number in the vector at the same:

abs_set <- function (vec) {
  neg <- vec < 0
  vec[neg] <- vec[neg] * -1
  vec
}

abs_set(c(-1,-2,-3,-4,-5,-6))

# "abs_set" is much faster than "abs_loop" because it relies on operations
# that R does does quickly: logical tests, subsetting, and element-wise
# execution.

# I can use the "system.time" function to see just how fast "abs_set" is.
# "system.time" takes an R expression, runs it, and then displays how
# much time elapsed while the expression run.
# To compare "abs_loop" and "abs_Set", first make a long vector of positive
# and negative numbers. "long" will conatin 10 million values.

long <- rep(c(-1, 1), 5000000)

# "rep" repeats a value, or vector of values, many times. To use "rep"
# give it a vector of values and then the number of times to repeat the
# vector. I can then use "system.time" to measure how much time it takes
# each function to evaluate long:

system.time(abs_loop(long))
system.time(abs_set(long))

# The first two column of the output of "system.time" report how many
# seconds my computer spent executing the call on the user side and
# system side of my prosses. The last column displays how many seconds
# elapsed while R ran the expression.

# R comes with a built-in absoulate value function, "abs()"
system.time(abs(long))

# How to write vectorized code...........................
# I can identify all of the elements of a vector that fall into a case
# with logical test. R will execute the test in element-wise fashion and
# return a TRUE for every element that belongs in that case.

# For example, "vec < 0" identifies every value of "vec" that belongs to
# the negative case.

# I can use the same logical test to extract the set of negative values
# with logical subsetting:

vec <- c(1, -2, 3, -4, 5, -6, 7, -8, 9, -10)
vec < 0
vec[vec < 0]
vec[vec < 0] * -1       # Turn into absolute value from negative value
vec[vec < 0] <- vec[vec < 0] * -1 # replace the vector with absolute value

# Use logical subsetting to modify groups of values in place. R's arithmetic
# and assignment operators are vectorized, which let's me manipulate and
# update multiple value at once.

# Vectorized a function.................................... 
# The following function converts a vector of slot symbols to a vector
# of new slot symbols.

change_symbols <- function (vec) {
  for (i in 1:length(vec)) {
    if (vec[i] == "DD") {
      vec[i] <- "joker"
      
    } else if (vec[i] == "C") {
      vec[i] <- "ace"
      
    } else if (vec[i] == "7") {
      vec[i] <- "king"
      
    } else if (vec[i] == "B") {
      vec[i] <- "queen"
      
    } else if (vec[i] == "BB") {
      vec[i] <- "jack"
      
    } else if (vec[i] == "BBB") {
      vec[i] <- "ten"
      
    } else {
      vec[i] <- "nine"
    }
  }
  vec
}

vec <- c("C", "7", "B", "DD", "BB", "BBB", "0")
change_symbols(vec)

many <- rep(vec, 1000000)

system.time(change_symbols(many))

# "change_symbols" uses a "for" loop to sort values into seven different
# cases.

# "change_symbols", creat a logical test that can identify each case:
vec[vec == "DD"]
vec[vec == "C"]
vec[vec == "7"]
vec[vec == "B"]
vec[vec == "BB"]
vec[vec == "BBB"]
vec[vec == "0"]

# Then write code that can change the symbols for each case:

vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"

# When i combine this into a function, i have a vectorized version of
# "change_symbols" that runs about 22 times faster:

change_vec <- function (vec) {
  vec[vec == "DD"] <- "joker"
  vec[vec == "C"] <- "ace"
  vec[vec == "7"] <- "king"
  vec[vec == "B"] <- "queen"
  vec[vec == "BB"] <- "jack"
  vec[vec == "BBB"] <- "ten"
  vec[vec == "0"] <- "nine"
  
  vec
}

change_vec(vec)

system.time(change_symbols(many))
system.time(change_vec(many))

# Or even better, use a lookup table. Lookup tables are a vectorized
# method because they rely on R's vectorized selection operators:

change_vec2 <- function (vec) {
  tb <- c("DD" = "joker", "C" = "ace", "7" = "king", "B" = "queen",
          "BB" = "jack", "BBB" = "ten", "0" = "nine")
  unname(tb[vec])
}

change_vec2(vec)

system.time(change_symbols(many))
system.time(change_vec(many))
system.time(change_vec2(many))

# How to write fast "for" loop in R.......................
# I can increase the speed of my "for" loop by doing two things to optimized
# each loop. First, do as much as i can outside of the "for" loop. Second,
# make sure that any storage objects that i use with the loop are learge
# enough to contain all of the results of the loops.

# For example, both loops below will need to store one million values. The
# first loop stores its values in an object named "output" that begins with
# a length of one million:

system.time({
  output <- rep(NA, 1000000)
  for (i in 1:1000000) {
    output[i] <- i + 1
  }
})

# The second loop stores its values in an object named "output" that begins
# with a length of one. R will expand the object to a length of one million
# as it runs the loop. 

system.time({
  output <- NA
  for (i in 1:1000000) {
    output[i] <- i + 1
  }
})

# Vectorized code in practice................................
# In loops, i calculated the exact payout rate for my slot mechine, but i could
# have estimated this payout rate with a simulation. If i played the slot
# mechine many, many times, the average prize over all the plays would be a good
# estimate of the true payout rate.

winnings <- vector(length = 1000000)
for (i in 1:1000000) {
  winnings[i] <- play()
}
mean(winnings)

# This simulation takes a while to run
system.time(for (i in 1:1000000) {
  winnings[i] <- play()
})

# I could rewrite "get_symbols" to generate n slot combinations and return them
# as an n X 3 matrix, like the one that follows. Each row of the matrix will
# contain one slot combination to be scored:

get_many_symbols <- function (n) {
  wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
  vec <- sample(wheel, size = 3 * n, replace = TRUE,
                prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
  matrix(vec, ncol = 3)
}

m <- get_many_symbols(10)

# I could also rewrite "play" to take a parameter, n, and return n prizes, in
# a data frame

play_many <- function (n) {
  symb_mat <- get_many_symbols(n = n)
  data.frame(w1 = symb_mat[,1], w2 = symb_mat[,2],
             w3 = symb_mat[,3], prize = score_many(symb_mat))
}

# Now i need to write "score_many" that a vectorized version of "score" that
# takes an n X 3 matrix and returns n prizes.

score_many <- function (symbols) {
  # STEP 1: Assign base prize based on cherries and diamonds
  # count the number of cherries and diamonds in each combination
  cherries <- rowSums(symbols == "C")
  diamonds <- rowSums(symbols == "DD")
  
  # wild diamonds count as cherries
  prize <- c(0,2,5)[cherries + diamonds + 1]
  
  # but not if there are zero real cherries
  # (cherries is coerced to FALSE where cherries == 0)
  prize[!cherries] <- 0
  
  # STEP 2: change prize for conbinations that contain three of a kind
  same <- symbols[, 1] == symbols[, 2] & symbols[, 2] == symbols[, 3]
  payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40,
               "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
  prize[same] <- payoffs[symbols[same, 1]]
  
  # STEP 3: Change prize for combinations that contain all bars
  bars <- symbols == "B" | symbols == "BB" | symbols == "BBB"
  all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
  prize[all_bars] <- 5
  
  # STEP 4: Handle wilds
  
  # combos with two diamonds
  two_wilds <- diamonds == 2
  
  # Identify the non wild symbol
  one <- two_wilds & symbols[, 1] != symbols[, 2] &
    symbols[, 2] == symbols[, 3]
  two <- two_wilds & symbols[, 1] != symbols[, 2] &
    symbols[, 1] == symbols[, 3]
  three <- two_wilds & symbols[, 1] == symbols[,2] &
    symbols[, 2] != symbols[, 3]
  
  # Treat as three of a kind
  prize[one] <- payoffs[symbols[one, 1]]
  prize[two] <- payoffs[symbols[two, 2]]
  prize[three] <- payoffs[symbols[three, 3]]
  
  # combos with one wild
  one_wild <- diamonds == 1
  
  # Treat as all bars (if appropriate)
  wild_bars <- one_wild & (rowSums(bars) == 2)
  prize [wild_bars] <- 5
  
  # Treat as three of a kind (if appropriate)
  one <- one_wild & symbols[, 1] == symbols[, 2]
  two <- one_wild & symbols[, 2] == symbols[, 3]
  three <- one_wild & symbols[, 3] == symbols[, 1]
  prize[one] <- payoffs[symbols[one, 1]]
  prize[two] <- payoffs[symbols[two, 2]]
  prize[three] <- payoffs[symbols[three, 3]]
  
  # STEP 5: Double prize for every diamond in combo
  unname(prize * 2^diamonds)
}

score_many(symbols)

play_many(100)

plays <- play_many(10000000)
mean(plays$prize)

system.time(play_many(10000000))


