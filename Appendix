# i can see a list of R's data sets as well as a short description of each
# by running:
help(package = "datasets")

# To use a data set, just type its name.
iris

# To determine which directory R is using as my working directory, run:
getwd()

# To set working dicrectory
setwd("~/Users/Ryans/Documents/Book")

# I can see what files are in my working directory.
list.files()

# To load a plain-text file, use "read.table". The first argument is the name
# of my file. Use "sep"  to tell "read.table" what character my file uses to
# seperate data entries. Use "header" to tell "read.table" wheather the first
# line of the file contains variable names instead of values.

poker <- read.table("G:/programming/R/poker.txt", sep = ",", header = TRUE)
poker2 <- read.table("poker2.txt", sep = ",", header = TRUE)
write.csv(poker, file = "Poker.csv", row.names = FALSE)

# If i know that my data uses a certain symbol to represent missing entries, i
# can tell "read.table" what the symbol is with the "na.strings" argument.
# "read.table" will convert all instances of the missing information symbol 
# to NA.

poker_missing <- read.table("G:/Programming/R/poker with missing values.txt",
                            sep = ",", header = TRUE, na.strings = ".")


# Use "skip" to tell R to skip a specific number of lines before it starts 
# reading in values from the file. Use "nrow" to tell R to stop reading in values
# after it has read in a certain number of lines.

read.table("Poker2.csv", sep = ",", skip = 3)
read.table("Poker2.csv", sep = ",", header = TRUE, nrows = 5)

# Setting the argument "stringsAsFactors = FALSE" will ensure that R saves any
# character strings in my data sets as character strings, not factors.

poker <- read.table("poker.csv", sep = ",", header = TRUE,
                    stringsAsFactors = FALSE)

# If i will be loading more than one data file, I can change the default factoring
# behavior at the global level with:

options(stringsAsFactors = FALSE)

# To compress a plain text file, surround the file name or file path with the
# function "bzfile", "gzfile", or "xzfile".

write.csv(poker, file = bzfile("R/poker.csv.bz2"), row.names = FALSE)

# I could read a compressed file with "read.csv"
read.csv("R/poker.csv.bz2")

# I can save an R object like a data frame as either an RData file or RDS file.
# RData files can store multiple R objects at once, but RDS files are the better
# choice because they foster reproducible code.
# To save data as an RData object, use the "save" function. To save data as RDS
# object, use the "saveRDS" function.

a <- 1
b <- 2
c <- 3

save(a,b,c, file = "stuff.RData")
k <- load("stuff.RData")
k

saveRDS(c(a,b), file = "stuff.RDS")
h <- readRDS("stuff.RDS")

# The package "XLConnect" helps me read Excel files directly into R. "XLConnect"
# relies on java to be perform independent. So before i run "XLConnect" i have to
# download java and install java.

install.packages("XLConnect")
library(XLConnect)

# Load an Excel workbook with "loadworkbook". It can load both .xls and .xlsx
# files. It takes one argument: the file path to my Excel workbook or the name
# of the file.

# Two steps methods.
workbook <- loadWorkbook("deck.xlsx")

sheet <- readWorksheet(workbook, sheet = 1 , startRow = 0, startCol = 0,
                       endRow = 6, endCol = 3)

# one step method.
sheet <- readWorksheetFromFile("G:/Programming/R/deck.xlsx", sheet = 1,
                               startRow = 0, startCol = 0,
                               endRow = 6, endCol = 3)
# Writing Spreadsheets...........
# Writing to an Excel spreadsheet is a four-step prosses. First i need to set up
# a object with "loadWorkbook". If i am not using an existing Excel file, i
# should add the argument "create = TRUE". "XLConnect" will create a blank
# workbook.

workbook <- loadWorkbook("file.xlsx", create = TRUE) # step 1

# Next, i need to create a worksheet inside my workbook object with "createsheet"
createSheet(workbook, "sheet 1") # step 2

# Then i can save my data frame or matrix to the sheet with "writeWorksheet"
writeWorksheet(workbook, data = poker, sheet = "sheet 1",
               header = TRUE)   # step 3

saveWorkbook(workbook)  # step 4

# I can also collapse these steps into a single call with "writeWorksheetToFile"
writeWorksheetToFile("file.xlsx", data = poker, sheet = "sheet 1",
                     startRow = 1, startCol = 1)

# To see the user manual of "XLConnect"
vignette("XLConnect")

# I can help myself by using R's debugging tools. These include the "traceback",
# "browser", "debug", "debugonce", "trace" and "recover" function.

first <- function() second()
second <- function() third()
third <- function() fourth()
fourth <- function() fifth()
fifth <- function() bug()

first()

# I can see the path of functions that R called before it hit an error
# by typing "traceback()". "traceback" will return a list of function
# that R called in the order that it called them. The top function
# will be the function that caused the error:

traceback()

# Exploring the "browser" mode. Browser mode is a basic debugging tool of R.

score <- function (symbols) {
  
  same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
  bars <- symbols %in% c("B", "BB", "BBB")
  
  if (same) {
    payout <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10,
                "C" = 10, "0" = 0)
    prize <- unname(payout[symbols[1]])
    
  } else if (all(bars)) {
    prize <- 5
    
  } else {
    cherries <- sum(symbols == "C")
    prize <- c(0,2,5)[cherries + 1]
    
  }
  
  
  diamonds <- sum(symbols == "DD")
  prize * 2^diamonds
}

get_symbols <- function() {
  wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
  sample(wheel, size = 3, replace = TRUE, prob = c(0.03, 0.03, 0.06,
                                                   0.1, 0.25, 0.01, 0.52))
}

play <- function() {
  symbols <- get_symbols()
  structure(score(symbols), symbols = symbols, class = "slots")
}


play()
