# Cancelling commands
# Some R commands may take a long time to run.
# You can cancel a command once it has begun by pressing ctrl + c.
# Note that it may also take R a long time to cancel the command.

# Magic with numbers...........................................................
# In this exercise i should end up the same number that i started with.

22 + 2       # Choose any number and add 2 to it. I choose 22.
24 * 3       # Multiply the result by 3
72  - 6      # Subtract 6 from the answer.
66 / 3       # Divide what you get by 3

# Project 1 : Weighted Dice..................................................

# The : operator returns its result as a vector, a one dimensional set of numbers
1 : 6

die <- 1:6   # Creating R Object. I now have a virtual die.

# I can see which object names i have already used with the function ls()
ls()

# I can do all sorts of math with the die.
# R uses element wise execution.
die - 1
die / 2
die * die

# When i give R two vectors of unequal lengths, R will repeat the shorter
# vector until it is as long as the longer vector, and do the math.
# If the length of short vector does not divide evenly into the length of
# the long vector, R will return a warning massage.
# This behavier is known as vector recycling, and it helps R to do element
# wise operations.

1:2
1:4
die
die + 1:2
die + 1:4         # will return a warning because the short vector does not 
#  divide evenly into the length of the longer vector.

die %*% die       # I can do inner multiplication with the %*% operator
die %o% die       # Outer multiplication with the %o% operator

# FUNCTION...................................................................

round(3.1415)     # I can round a number with the round() function
factorial(3)      # I can find out factorial number with the factorial() function

# The data i pass into the function is called the function's argument.
# The argument can be raw data, an R object, or even the results of another R
# function.

mean(1:6)
mean(die)
round(mean(die))

# There is an R function that can help "roll" the die.
# I can simulate a roll of the die with the sample() function.
# sample() takes two arguments: a vector named x and number named size.
# sample() will return size elements from the vector

sample(x = die, size = 1)
sample(die, size = 1)   # Or

args(round)  # I can look up the function's arguments with args()
round(3.2456, digits = 2)  # round() takes two arguments
# An R funtion will take optional arguments like digits.
# I can pass a new value to an optional argument if i want and R will use
# the default value if i do not.

# If i do not write out the names of my arguments, R will match my values
# to the arguments in my function by order.

sample(die, 1)

# R will always match a value to its argument name, no matter where it
# appears in the order of arguments.
sample(size = 2, x = die)

# SAMPLE WITH REPLACEMENT...................................................

# replace = TRUE argument replace each value after each draw.
# sampling with replacement is an easy way to create independent random samples.
# This is the correct way to simulate a pair of dice

sample(x = die, size = 2, replace = TRUE) # Two independent random samples.

# If i want to add up the dice, i can feed my result straight into the sum()
# function

dice <- sample(x = die, size = 2, replace = TRUE)
sum(dice)

# WRITING MY OWN FUNCTIONS..................................................

# Every function in R has three basic parts: a name, a body of code, a set of arguments.
# To make my own function, i need to replicate these parts and store them in
# a R object, which i can do with the function(){} function.
# function will build a function out of whatever R code i place between the braces.
# I can turn my dice code into a function ba calling:

roll <- function(){
  die <- 1:6
  dice <- sample(x = die, size = 2, replace = TRUE)
  sum(dice)
}

# To use it, write the object's name followed by an open and close parenthesis.

roll()

# If i type a function's name without the parenthesis, R will show me the
# code that is stored inside thr function.

roll

# ARGUMENTS.................................................................

# What if we i removed one line of code from my function and changed the
# name die to bones, like this?

roll2 <- function(){
  dice <- sample(bones, size = 2, replace = TRUE)
  sum(dice)
}

# Now i will get an error when i run the function. The function needs the
# object bones to do its job, but there is no object named bones to be found:

roll2()

# I can supply bones when i call roll2 if i make bones an argument of the
# function. To do this, put the name bones in the parenthesis that follow
# function when i define roll2:

roll2 <- function(bones){
  dice <- sample(bones, size =2, replace = TRUE)
  sum(dice)
}

# Now roll2 will work as long as i supply bones when i call the function.
# I can take advantage of this to roll different types of dice each time i
# call roll2. Remember we are rolling a pair of dice.

roll2(bones = 1:4)

roll2(bones = 1:6)

roll2(1:20)

roll2(30)

# Notice that roll2 will still give an error if you I do not supply a value
# for the bones argument when i call roll2:

roll2()

# I can prevent this error by giving the bones argument a default value.
# TO do this, set bones equal to a value when i define roll2:

roll2 <- function(bones = 1:6){
  dice <- sample(bones, size = 2, replace = TRUE)
  dice
}

# Now i can supply a new value for bones if i like, and roll2 will use the
# default value if i do not:

roll2(1000)
roll2()

# packages and help pages................................................................

# Let's make the dice roll high numbers slightly more often than it rolls
# low numbers. Before we weight the dice, we should make sure that they are
# fair to begin with. Two tools will help me do this: 
# "repetation" and "visualization"

# We will repeat our dice rolls wiith a function called "replicate" and 
# will visualize our rolls with a function called "qplot".
# "qplot comes" in a standalone R package called "ggplot2"
# "ggplot2" is a popular package for making grapHS.

# INSTALL PACKAGES........................................................

install.packages("ggplot2")

# To use an R package i next have to load it into my R session with the
# command:

library("ggplot2")

# "qplot" makes "quick plot". If i give "qplot" two vectors of equal length
# "qplot" will draw a scatterplot for me. "qplot" will use the first vector
# as a set of x values and the second vector as a set of y values.

# I can create vectors of numbers with the c function. Give c all of the
# numbers that want to appear in the vector, seperated by comma.
# c stands for concatenate, but i can think of it "combine" or "collect"

Bangladesh <- c(-1, -0.8, -0.6, -0.4, -0.3, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
India <- Bangladesh^3

# "qplot" makes a scatter plot when i give it two vector

qplot(Bangladesh, India)

# A scatterplot is a set of points, each plotted acording to its x and y
# values. "qplot" make points with element wise execution.
# Scatterplots are useful for visualizing the relationship between two variables.

# Now we are going to use a different type of graph, a histogram.
# A histogram visualizes the distribution of a single variable.
# It displays how many data points appear at each value of x.
# "qplot" will make a histogram whenever i give it only one vector to plot.
# "binwidth" is the width of bar.

x <- c(1, 2, 2, 2, 3, 3)
qplot(x, binwidth = 1)

# This plot shows that our vector contains one value in the interval
# [1, 2) by placing a bar of height 1 avobe the interval.
# The plot shows that the vector contains three values in the interval
# [2, 3) by placing a bar of height 3 in that interval.
# It shows that the vector contains two values in the interval
# [3, 4) by placing a bar of height 2 in that interval.
# Hard bracket, [, means that the first number is included in the interval
# The parenthesis, ), means that the last number is not included.

# Let's try another histogram

x2 <- c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4)
qplot(x2, binwidth = 1)

# Visualze a histogram

x3 <- c(0, 1, 1, 2, 2, 2, 3, 3, 4)
qplot(x3, binwidth = 1)

# How can i use a histogram to check the accuracy of my dice?
# "replicate" provides an easy way to repeat an R command many times.
# To use it first give "replicate" the number of times you wish to repeat an R
# command. "replicate" will run the command multiple times and stored the result
# as a vector.

replicate(3, 1+1)

rolls1 <- replicate(10, roll())
qplot(rolls1, binwidth = 1)

# Let's simulate 10000 dice rolls and plot the results
# The result that the dice are fair.

rolls <- replicate(10000, roll())
qplot(rolls, binwidth = 1)

# The probability of rolling any single number on a fair die is 1/6.
# I would like you to change the probability to 1/8 for each number below six,
# and then increase the probability of rolling a six to 3/8.
# Rewrite the roll function bellow to roll a weigted dice.

rollb <- function(){
  die <- 1:6
  dice <- sample(die, size = 2, replace = TRUE,
                 prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
  sum(dice)
}
rollsb <- replicate(10000, rollb())
qplot(rollsb, binwidth = .5)

# This confirms that we've effectively weighted the dice. High number occur
# much more often than low numbers.
# The remarkable thing is that this behavior will only be apparent when i examine
# long turm frequencies
